(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["scripts/home"],{

/***/ "./src/views/home/index.js":
/*!*********************************!*\
  !*** ./src/views/home/index.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n__webpack_require__(/*! ../../styles/pageStyles.scss */ \"./src/styles/pageStyles.scss\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar hi = 'world1';\nconsole.log(hi);\n\n/*\r\nclass BridePie {\r\n    constructor(...data){\r\n        const width = 540;\r\n        const height = 540;\r\n        const radius = Math.min(width, height) / 2;\r\n\r\n        const svg = d3.select(\"#graph\")\r\n            .append(\"svg\")\r\n                .attr(\"width\", width)\r\n                .attr(\"height\", height)\r\n            .append(\"g\")\r\n                .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\r\n\r\n        const color = d3.scaleOrdinal([\"#66c2a5\",\"#fc8d62\",\"#8da0cb\",\r\n             \"#e78ac3\",\"#a6d854\",\"#ffd92f\"]);\r\n\r\n        const pie = d3.pie()\r\n            .value(d => d.count)\r\n            .sort(null);\r\n\r\n        const arc = d3.arc()\r\n            .innerRadius(0)\r\n            .outerRadius(radius);\r\n        \r\n        const newarc = d3.arc()\r\n            .innerRadius(2 * radius / 3)\r\n            .outerRadius(radius);\r\n\r\n\r\n        function arcTween(a) {\r\n            const i = d3.interpolate(this._current, a);\r\n            this._current = i(1);\r\n            return (t) => arc(i(t));\r\n        }\r\n        \r\n        d3.json(\"./assets/data/data.json\").then(info => {\r\n                // Join new data\r\n                const groups = svg.selectAll('g')\r\n                  .data(pie(info.data));\r\n            \r\n                const path = svg.selectAll(\"path\")\r\n                    .data(pie(info.data));\r\n\r\n                // Update existing arcs\r\n                groups.transition().duration(200).attrTween(\"d\", arcTween);\r\n\r\n                // Enter new arcs\r\n                groups.enter().append(\"g\").append(\"path\")\r\n                    .attr(\"fill\", (d, i) => color(i))\r\n                    .attr(\"d\", arc)\r\n                    .attr(\"stroke\", \"white\")\r\n                    .attr(\"stroke-width\", \"6px\")\r\n//                    .append(\"text\")\r\n//                    .attr(\"transform\", function (d) {\r\n//                        return \"translate(\" + newarc.centroid(d) + \")\";\r\n//                    })\r\n//                    .attr(\"text-anchor\", \"middle\")\r\n//                    .attr(\"fill\", \"white\")\r\n//                    .text(function (d) {\r\n//                        return d.data.label;\r\n//                    })\r\n                    .each(function(d) { this._current = d; });\r\n        });\r\n    }\r\n}\r\n\r\nlet pie = new BridePie();*/\n\nvar IconsHandler = function () {\n    //Class handling for animated icons\n    function IconsHandler() {\n        _classCallCheck(this, IconsHandler);\n\n        this.selectors = [\"o-icon--circle\", \"o-icon--square\", \"o-icon--square--no-rad\", \"o-icon--hrect\", \"o-icon--hrect--no-rad\", \"o-icon--vrect\", \"o-icon--vrect--no-rad\"];\n\n        //Setting binding for all icons\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = this.selectors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var selector = _step.value;\n\n                var collection = document.getElementsByClassName(selector);\n\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                    for (var _iterator2 = collection[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var htmlElement = _step2.value;\n\n                        var dataToggle = htmlElement.attributes.getNamedItem(\"data-toggle\");\n                        //Filtering out the ones that dont have data-toggle=\"icon\"\n                        if (dataToggle != null && dataToggle.value == \"icon\") {\n                            console.log(htmlElement);\n                            //Setting listener\n                            htmlElement.addEventListener('click', this.toggleIcon());\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                            _iterator2.return();\n                        }\n                    } finally {\n                        if (_didIteratorError2) {\n                            throw _iteratorError2;\n                        }\n                    }\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    }\n\n    _createClass(IconsHandler, [{\n        key: \"toggleIcon\",\n        value: function toggleIcon() {\n            return function (e) {\n                console.log(e.target, e.currentTarget);\n                var rootElement = e.currentTarget;\n\n                if (rootElement.classList.contains('shown')) {\n                    rootElement.classList.add('hidding');\n                    setTimeout(function () {\n                        rootElement.classList.remove('hidding');\n                        rootElement.classList.remove('shown');\n                    }, 200);\n                } else {\n                    rootElement.classList.add('showing');\n                    setTimeout(function () {\n                        rootElement.classList.add('shown');\n                        rootElement.classList.remove('showing');\n                    }, 200);\n                }\n                //\n            };\n        }\n    }]);\n\n    return IconsHandler;\n}();\n\nvar icons = new IconsHandler();\n\n//# sourceURL=webpack:///./src/views/home/index.js?");

/***/ })

},[["./src/views/home/index.js","runtime","scripts/home~scripts/styleguide"]]]);